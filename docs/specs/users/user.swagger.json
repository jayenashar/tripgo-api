{
  "swagger": "2.0",
  "info": {
    "description": "Use this endpoints to manage your users data. The data will be restricted to your own (user,API key) pairs<br>https://api.tripgo.com/v1/data/user",
    "version": "1.0",
    "title": "User Data",
    "contact": {
      "name": "TripGo API",
      "email": "api@tripgo.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/satapp-debug/data/user",
  "tags": [
    {
      "name": "User",
      "description": "Endpoint for saving and retrieving user profile data"
    },
    {
      "name": "Phone",
      "description": "Endpoint for saving and retrieving phone user data"
    },
    {
      "name": "Email",
      "description": "Endpoint for saving and retrieving email user data"
    },
    {
      "name": "Push",
      "description": "Endpoint for saving and retrieving push notification data"
    },
    {
      "name": "Trip",
      "description": "Endpoint for retrieving trips in JSON format"
    },
    {
      "name": "Vehicles",
      "description": "Endpoint for saving and retrieving Vehicles"
    },
    {
      "name": "Favorites",
      "description": "Endpoint for saving and retrieving Favorites"
    },
    {
      "name": "CustomData",
      "description": "This endpoint will allow to get and save the custom app data of the users.<br>It should be filtered by IP when enabled on production, as it currently does not have any access restriction"
    },
    {
      "name": "EventsInfo",
      "description": "Endpoint for saving and retrieving EventsInfo"
    },
    {
      "name": "Habituals",
      "description": "Endpoint for saving and retrieving Habituals"
    },
    {
      "name": "History",
      "description": "Endpoint for saving and retrieving history search items"
    },
    {
      "name": "LocationKeys",
      "description": "Endpoint for saving and retrieving Location Keys"
    },
    {
      "name": "TripItem",
      "description": "Endpoint for saving and retrieving Trip Items"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/eventinfo/{id}": {
      "get": {
        "tags": [
          "EventsInfo"
        ],
        "summary": "Get a specific event info",
        "description": "",
        "operationId": "getEventInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the event info",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          },
          "404": {
            "description": "No such event info",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "EventsInfo"
        ],
        "summary": "Updates an existing Event Info",
        "description": "",
        "operationId": "updateEventInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the event info",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "EventsInfo"
        ],
        "summary": "Deletes an existing Event Info",
        "description": "",
        "operationId": "deleteEventInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the event info",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/eventinfo": {
      "get": {
        "tags": [
          "EventsInfo"
        ],
        "summary": "Get all the events info of the user",
        "description": "",
        "operationId": "getData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonEventInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonEventInfo"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "EventsInfo"
        ],
        "summary": "Creates a new Event Info",
        "description": "",
        "operationId": "addEventInfo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the event info to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonEventInfo"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonEventInfo"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/favorite": {
      "get": {
        "tags": [
          "Favorites"
        ],
        "summary": "Get all the favorites of the user",
        "description": "",
        "operationId": "getFavorite",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonFavorite"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonFavorite"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Favorites"
        ],
        "summary": "Creates a new Favorite",
        "description": "",
        "operationId": "addFavorite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the favorite to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonFavorite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonFavorite"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonFavorite"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/favorite/{id}": {
      "get": {
        "tags": [
          "Favorites"
        ],
        "summary": "Get a specific favorite",
        "description": "",
        "operationId": "getFavoriteItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the favorite",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonFavorite"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonFavorite"
            }
          },
          "404": {
            "description": "No such favorite",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Favorites"
        ],
        "summary": "Updates an existing Favorite",
        "description": "",
        "operationId": "updateFavorite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the favorite",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the new favorite data, can be partial",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonFavorite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonFavorite"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonFavorite"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Favorites"
        ],
        "summary": "Deletes an existing Favorite",
        "description": "",
        "operationId": "deleteMultiFavorite",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the favorite",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/habitual": {
      "get": {
        "tags": [
          "Habituals"
        ],
        "summary": "Get all the habituals of the user",
        "description": "",
        "operationId": "getHabitualItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonHabitualItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonHabitualItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Habituals"
        ],
        "summary": "Creates a new Habitual",
        "description": "",
        "operationId": "addHabitualItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the habitual to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonHabitualItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonHabitualItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonHabitualItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/habitual/{id}": {
      "get": {
        "tags": [
          "Habituals"
        ],
        "summary": "Get a specific habitual",
        "description": "",
        "operationId": "getHabitualItem_1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the habitual",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonHabitualItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonHabitualItem"
            }
          },
          "404": {
            "description": "No such habitual",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Habituals"
        ],
        "summary": "Updates an existing Habitual",
        "description": "",
        "operationId": "updateHabitualItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the habitual",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the new habitual data, can be partial",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonHabitualItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonHabitualItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonHabitualItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Habituals"
        ],
        "summary": "Deletes an existing Habitual",
        "description": "",
        "operationId": "deleteHabitualItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the habitual",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/history": {
      "get": {
        "tags": [
          "History"
        ],
        "summary": "Get the history list of the user",
        "description": "",
        "operationId": "getHistory",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonSearchHistory"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonSearchHistory"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Creates a new history",
        "description": "",
        "operationId": "addHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the history to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonSearchHistory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonSearchHistory"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonSearchHistory"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/history/array": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Add new history items",
        "description": "",
        "operationId": "addMultipleHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the history items to create",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonSearchHistory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonSearchHistory"
              }
            },
            "responseSchema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JsonSearchHistory"
              }
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/locationkey/{id}": {
      "get": {
        "tags": [
          "LocationKeys"
        ],
        "summary": "Get a specific location key",
        "description": "",
        "operationId": "getLocationKeysItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the location key",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "LocationKeys"
        ],
        "summary": "Updates an existing Location Key",
        "description": "",
        "operationId": "updateLocationKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the location key",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the location key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "LocationKeys"
        ],
        "summary": "Deletes an existing Location Key",
        "description": "",
        "operationId": "deleteLocationKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the location key",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/locationkey": {
      "get": {
        "tags": [
          "LocationKeys"
        ],
        "summary": "Get all the location keys of the user",
        "description": "",
        "operationId": "getLocationKeys",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonLocationKey"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonLocationKey"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "LocationKeys"
        ],
        "summary": "Creates a new Location Key",
        "description": "",
        "operationId": "addLocationKeys",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the location key to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonLocationKey"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonLocationKey"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/tripitem/{id}": {
      "get": {
        "tags": [
          "TripItem"
        ],
        "summary": "Get a specific trip item",
        "description": "",
        "operationId": "getTripItemItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the trip item",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "TripItem"
        ],
        "summary": "Updates an existing Trip Item",
        "description": "",
        "operationId": "updateTripItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the trip item",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the new trip item data, can be partial",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TripItem"
        ],
        "summary": "Deletes an existing Trip Item",
        "description": "",
        "operationId": "deleteMultiTripItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the trip item",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/tripitem": {
      "get": {
        "tags": [
          "TripItem"
        ],
        "summary": "Get all the trip items of the user",
        "description": "",
        "operationId": "getTripItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonAbstractTripItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonAbstractTripItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "TripItem"
        ],
        "summary": "Creates a new Trip Item",
        "description": "",
        "operationId": "addTripItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the trip item to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonAbstractTripItem"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/trip": {
      "get": {
        "tags": [
          "Trip"
        ],
        "summary": "Get user trips",
        "description": "Get the list of trips for a user from the database",
        "operationId": "getSavedTrips",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "responseSchema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/custom": {
      "get": {
        "tags": [
          "CustomData"
        ],
        "summary": "Get data for user",
        "description": "Given a specific user, will return the app data",
        "operationId": "getCustomData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "responseSchema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "CustomData"
        ],
        "summary": "Save data for user",
        "description": "Will save the customData of a specific user",
        "operationId": "saveData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "responseSchema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets user profile data",
        "description": "",
        "operationId": "getUserData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            },
            "responseSchema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates the user profile data",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "new user data, can be partial",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTripGoUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            },
            "responseSchema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/phone": {
      "post": {
        "tags": [
          "Phone"
        ],
        "summary": "Adds a new Phone",
        "description": "",
        "operationId": "addPhone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the phone to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPhone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            },
            "responseSchema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/phone/{id}": {
      "put": {
        "tags": [
          "Phone"
        ],
        "summary": "Updates an existing Phone",
        "description": "",
        "operationId": "updatePhone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the phone",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the phone to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPhone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            },
            "responseSchema": {
              "$ref": "#/definitions/TripGoUser_ApiV2"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Phone"
        ],
        "summary": "Deletes an existing Phone",
        "description": "",
        "operationId": "deletePhone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the phone to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/push": {
      "get": {
        "tags": [
          "Push"
        ],
        "summary": "Get list of registered devices",
        "description": "return the list of devices registered for the given user",
        "operationId": "getPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonPushNotificationToken_Api"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonPushNotificationToken_Api"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Push"
        ],
        "summary": "Adds a new PN device",
        "description": "Add/update a device/platform specific token for push notifications, note that you need to send a per user unique deviceId. We will only keep one token per (user,deviceid)",
        "operationId": "addPush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the device to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPushNotificationToken"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Push"
        ],
        "summary": "Deletes an existing PN device",
        "description": "Remove a device/platform specific token for push notifications.",
        "operationId": "deletePush",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the push token to delete",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonPushNotificationToken"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/phone/validate/{userID}/{phoneID}": {
      "post": {
        "tags": [
          "Phone"
        ],
        "summary": "Validate a phone number",
        "description": "Filtered by IP address",
        "operationId": "validatePhone",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "phoneID",
            "in": "path",
            "description": "phone ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/image": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Adds a new profile image",
        "description": "",
        "operationId": "setImage",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "image profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MultipartBody"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Removes the profile image",
        "description": "",
        "operationId": "deleteImage",
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/vehicle/{id}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get a specific vehicle",
        "description": "",
        "operationId": "addVehicle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the vehicle",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonVehicle"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonVehicle"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Updates an existing Vehicle",
        "description": "",
        "operationId": "updateVehicle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the vehicle",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the new vehicle data, can be partial",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonVehicle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonVehicle"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonVehicle"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Deletes an existing Vehicle",
        "description": "",
        "operationId": "deleteVehicle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of the vehicle",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/vehicle": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Get all the vehicles of the user",
        "description": "",
        "operationId": "getVehicle",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonResultCollectionJsonVehicle"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonResultCollectionJsonVehicle"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "summary": "Creates a new Vehicle",
        "description": "",
        "operationId": "addVehicle_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "the vehicle to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JsonVehicle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonVehicle"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonVehicle"
            }
          },
          "401": {
            "description": "userToken missing or invalid",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "userToken": []
          }
        ]
      }
    },
    "/email/validate/{token}": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Validate alias",
        "description": "checks the validity of an alias token",
        "operationId": "validateAlias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "token",
            "in": "path",
            "description": "a valid alias token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResult"
            },
            "responseSchema": {
              "$ref": "#/definitions/ApiResult"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/email/primary/{email}": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Set alias email primary",
        "description": "If it is already validated",
        "operationId": "setPrimaryEmail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResult"
            },
            "responseSchema": {
              "$ref": "#/definitions/ApiResult"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/email/{email}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Gets a specific email alias",
        "description": "",
        "operationId": "getAlias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "path",
            "description": "alias to obtain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonAlias"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonAlias"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Add email alias",
        "description": "by sending an email with a url to validate the alias email",
        "operationId": "addAlias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "path",
            "description": "to add as alias to the user account",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResult"
            },
            "responseSchema": {
              "$ref": "#/definitions/ApiResult"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Deletes email alias",
        "description": "",
        "operationId": "deleteAlias",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResult"
            },
            "responseSchema": {
              "$ref": "#/definitions/ApiResult"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    },
    "/email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Get email aliases",
        "description": "",
        "operationId": "getAliases",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userToken",
            "in": "header",
            "description": "user token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonAliases"
            },
            "responseSchema": {
              "$ref": "#/definitions/JsonAliases"
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "responseSchema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "API key": {
      "description": "Identifies your app, get an API key in https://tripgo.3scale.net/signup?plan_ids[]=2357355863999",
      "type": "apiKey",
      "name": "X-TripGo-Key",
      "in": "header"
    },
    "User Token": {
      "description": "Identifies your user, use /specs/userAuth to get this userToken",
      "type": "apiKey",
      "name": "userToken",
      "in": "header"
    }
  },
  "definitions": {
    "JsonEventInfo": {
      "type": "object",
      "properties": {
        "effectiveStart": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "effectiveEnd": {
          "type": "integer",
          "format": "int64",
          "example": 1448053835392
        },
        "expiryDate": {
          "type": "integer",
          "format": "int32",
          "example": 16780
        },
        "goHereDirectly": {
          "type": "boolean"
        },
        "excluded": {
          "type": "boolean"
        },
        "identifier": {
          "type": "string",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        }
      },
      "description": "Represents information about an event in the agenda"
    },
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "usererror": {
          "type": "boolean"
        }
      }
    },
    "JsonResult": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object"
        }
      }
    },
    "JsonResultCollectionJsonEventInfo": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonEventInfo"
          }
        }
      }
    },
    "JsonFavorite": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f",
          "description": "unique id"
        },
        "name": {
          "type": "string",
          "example": "favorite location"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "order to be shown"
        },
        "type": {
          "type": "string",
          "description": "this type field will determine the fields that will be available : location, stop, query, trip"
        }
      }
    },
    "JsonFavoriteLocation": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f",
          "description": "unique id"
        },
        "name": {
          "type": "string",
          "example": "favorite location"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "order to be shown"
        },
        "location": {
          "$ref": "#/definitions/JsonLocation"
        }
      }
    },
    "JsonFavoriteQuery": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite"
        },
        {
          "type": "object",
          "properties": {
            "startLocation": {
              "$ref": "#/definitions/JsonLocation"
            },
            "endLocation": {
              "$ref": "#/definitions/JsonLocation"
            },
            "queryTime": {
              "$ref": "#/definitions/JsonQueryTime"
            }
          }
        }
      ]
    },
    "JsonFavoriteStop": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string",
              "example": "central"
            },
            "region": {
              "type": "string",
              "example": "AU_NSW_Sydney"
            },
            "stopCode": {
              "type": "string",
              "example": "AU_NSW_Sydney-Central Station-train"
            }
          }
        }
      ]
    },
    "JsonFavoriteTrip": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite"
        },
        {
          "type": "object",
          "properties": {
            "startLocation": {
              "$ref": "#/definitions/JsonLocation"
            },
            "endLocation": {
              "$ref": "#/definitions/JsonLocation"
            },
            "time": {
              "type": "integer",
              "format": "int32",
              "example": 12300,
              "description": "in seconds since midnight"
            },
            "pattern": {
              "type": "object",
              "description": "pattern of the trip",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "JsonLocation": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "example": -33.858867
        },
        "lng": {
          "type": "number",
          "format": "double",
          "example": 151.2036155
        },
        "address": {
          "type": "string",
          "example": "55 Harrington street"
        },
        "name": {
          "type": "string",
          "example": "Office"
        }
      },
      "description": "Represents a location"
    },
    "JsonQueryTime": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "leaveAfter": {
          "type": "boolean"
        }
      }
    },
    "JsonResultCollectionJsonFavorite": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonFavorite"
          }
        }
      }
    },
    "JsonHabitualItem": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "startDate": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813
        },
        "endDate": {
          "type": "integer",
          "format": "int64",
          "example": 1448064813
        },
        "recurrenceRule": {
          "type": "string",
          "example": "W011110;32400;18000",
          "description": "'W011110;32400;18000' to specify repeat Mo-Fr 9-17"
        },
        "timeRaw": {
          "type": "integer",
          "format": "int32",
          "example": 12300,
          "description": "seconds since midnight"
        },
        "typeRaw": {
          "type": "string"
        },
        "location": {
          "readOnly": true,
          "$ref": "#/definitions/JsonFavoriteLocation"
        }
      }
    },
    "JsonResultCollectionJsonHabitualItem": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonHabitualItem"
          }
        }
      }
    },
    "JsonResultCollectionJsonSearchHistory": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonSearchHistory"
          }
        }
      }
    },
    "JsonSearchHistory": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "example": -33.858867
        },
        "lng": {
          "type": "number",
          "format": "double",
          "example": 151.2036155
        },
        "address": {
          "type": "string",
          "example": "55 Harrington street"
        },
        "name": {
          "type": "string",
          "example": "Office"
        },
        "dateAdded": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "dateUpdated": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "source": {
          "type": "boolean",
          "description": "source or destination"
        },
        "updates": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "number of updates"
        }
      },
      "description": "Represents a Search History item, including name, address, source and lat,lng. <br>Will automatically add dateAdded and dateUpdated values, and count the number of updates.<br>Will keep a max of 30 elements per user and merge items with equal (lat,lng) using 5 decimal digits of <a href='http://gis.stackexchange.com/questions/8650/how-to-measure-the-accuracy-of-latitude-and-longitude'>precision</a>"
    },
    "JsonLocationKey": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/JsonLocation"
        },
        "usageCount": {
          "type": "integer",
          "format": "int32"
        },
        "key": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "JsonResultCollectionJsonLocationKey": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonLocationKey"
          }
        }
      }
    },
    "JsonAbstractTripItem": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "arrivalTime": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813
        },
        "departureTime": {
          "type": "integer",
          "format": "int64",
          "example": 1448065813
        },
        "flags": {
          "type": "string"
        },
        "fromIdentifier": {
          "type": "string"
        },
        "toIdentifier": {
          "type": "string"
        }
      }
    },
    "JsonTripFlightItem": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem"
        },
        {
          "type": "object",
          "properties": {
            "arrivalAirport": {
              "type": "string"
            },
            "departureAirpoint": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "note": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JsonTripItem": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "JsonTripKitItem": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem"
        },
        {
          "type": "object",
          "properties": {
            "kitID": {
              "type": "string"
            },
            "shareURL": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JsonResultCollectionJsonAbstractTripItem": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonAbstractTripItem"
          }
        }
      }
    },
    "JsonAbstractTripItem_ApiV2": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "arrivalTime": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813
        },
        "departureTime": {
          "type": "integer",
          "format": "int64",
          "example": 1448065813
        },
        "flags": {
          "type": "string"
        },
        "fromIdentifier": {
          "type": "string"
        },
        "toIdentifier": {
          "type": "string"
        }
      }
    },
    "JsonEmail_ApiV2": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "johndoe@skedgo.com"
        },
        "validated": {
          "type": "boolean",
          "readOnly": true
        },
        "primary": {
          "type": "boolean",
          "readOnly": true
        }
      },
      "description": "Represents a user email, it can be set as primary and may be validated or not"
    },
    "JsonEventInfo_ApiV2": {
      "type": "object",
      "properties": {
        "effectiveStart": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "effectiveEnd": {
          "type": "integer",
          "format": "int64",
          "example": 1448053835392
        },
        "expiryDate": {
          "type": "integer",
          "format": "int32",
          "example": 16780
        },
        "goHereDirectly": {
          "type": "boolean"
        },
        "excluded": {
          "type": "boolean"
        },
        "identifier": {
          "type": "string",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        }
      },
      "description": "Represents information about an event in the agenda"
    },
    "JsonFavoriteLocation_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "location": {
              "$ref": "#/definitions/JsonLocation_ApiV2"
            }
          }
        }
      ]
    },
    "JsonFavoriteQuery_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "startLocation": {
              "$ref": "#/definitions/JsonLocation_ApiV2"
            },
            "endLocation": {
              "$ref": "#/definitions/JsonLocation_ApiV2"
            },
            "queryTime": {
              "$ref": "#/definitions/JsonQueryTime_ApiV2"
            }
          }
        }
      ]
    },
    "JsonFavoriteStop_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string",
              "example": "central"
            },
            "region": {
              "type": "string",
              "example": "AU_NSW_Sydney"
            },
            "stopCode": {
              "type": "string",
              "example": "AU_NSW_Sydney-Central Station-train"
            }
          }
        }
      ]
    },
    "JsonFavoriteTrip_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonFavorite_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "startLocation": {
              "$ref": "#/definitions/JsonLocation_ApiV2"
            },
            "endLocation": {
              "$ref": "#/definitions/JsonLocation_ApiV2"
            },
            "time": {
              "type": "integer",
              "format": "int32",
              "example": 12300,
              "description": "in seconds since midnight"
            },
            "pattern": {
              "type": "object",
              "description": "pattern of the trip",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      ]
    },
    "JsonFavorite_ApiV2": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f",
          "description": "unique id"
        },
        "name": {
          "type": "string",
          "example": "favorite location"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": 0,
          "description": "order to be shown"
        },
        "type": {
          "type": "string",
          "description": "this type field will determine the fields that will be available : location, stop, query, trip"
        }
      }
    },
    "JsonHabitualItem_ApiV2": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "startDate": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813
        },
        "endDate": {
          "type": "integer",
          "format": "int64",
          "example": 1448064813
        },
        "recurrenceRule": {
          "type": "string",
          "example": "W011110;32400;18000",
          "description": "'W011110;32400;18000' to specify repeat Mo-Fr 9-17"
        },
        "timeRaw": {
          "type": "integer",
          "format": "int32",
          "example": 12300,
          "description": "seconds since midnight"
        },
        "typeRaw": {
          "type": "string"
        },
        "location": {
          "readOnly": true,
          "$ref": "#/definitions/JsonFavoriteLocation_ApiV2"
        }
      }
    },
    "JsonLocationKey_ApiV2": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/JsonLocation_ApiV2"
        },
        "usageCount": {
          "type": "integer",
          "format": "int32"
        },
        "key": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "JsonLocation_ApiV2": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "example": -33.858867
        },
        "lng": {
          "type": "number",
          "format": "double",
          "example": 151.2036155
        },
        "address": {
          "type": "string",
          "example": "55 Harrington street"
        },
        "name": {
          "type": "string",
          "example": "Office"
        }
      },
      "description": "Represents a location"
    },
    "JsonOpting_ApiV2": {
      "type": "object",
      "properties": {
        "googleAnalytics": {
          "type": "boolean"
        },
        "xeroxAnalytics": {
          "type": "boolean"
        }
      },
      "description": "Represents opting's booleans for the user, must all be sent together when updating it"
    },
    "JsonPhone_ApiV2": {
      "type": "object",
      "properties": {
        "phoneCode": {
          "type": "string",
          "example": "750"
        },
        "phone": {
          "type": "string",
          "example": "43216789"
        },
        "validated": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "example": "mobile"
        },
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JsonProfileWeights_ApiV2": {
      "type": "object",
      "properties": {
        "carbon": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "hassle": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "money": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "time": {
          "type": "number",
          "format": "float",
          "example": 1.0
        }
      },
      "description": "Represents the user preferences about how to combine the various components of a trip's quality into a single figure"
    },
    "JsonQueryTime_ApiV2": {
      "type": "object",
      "properties": {
        "time": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "leaveAfter": {
          "type": "boolean"
        }
      }
    },
    "JsonSearchHistory_ApiV2": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "example": -33.858867
        },
        "lng": {
          "type": "number",
          "format": "double",
          "example": 151.2036155
        },
        "address": {
          "type": "string",
          "example": "55 Harrington street"
        },
        "name": {
          "type": "string",
          "example": "Office"
        },
        "dateAdded": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "dateUpdated": {
          "type": "integer",
          "format": "int64",
          "example": 1448053813392
        },
        "source": {
          "type": "boolean",
          "description": "source or destination"
        },
        "updates": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "number of updates"
        }
      },
      "description": "Represents a Search History item, including name, address, source and lat,lng. <br>Will automatically add dateAdded and dateUpdated values, and count the number of updates.<br>Will keep a max of 30 elements per user and merge items with equal (lat,lng) using 5 decimal digits of <a href='http://gis.stackexchange.com/questions/8650/how-to-measure-the-accuracy-of-latitude-and-longitude'>precision</a>"
    },
    "JsonTripFlightItem_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "arrivalAirport": {
              "type": "string"
            },
            "departureAirpoint": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "note": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JsonTripItem_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem_ApiV2"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "JsonTripKitItem_ApiV2": {
      "allOf": [
        {
          "$ref": "#/definitions/JsonAbstractTripItem_ApiV2"
        },
        {
          "type": "object",
          "properties": {
            "kitID": {
              "type": "string"
            },
            "shareURL": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JsonVehicle_ApiV2": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "name": {
          "type": "string",
          "example": "Primus"
        },
        "type": {
          "type": "string",
          "example": "car"
        },
        "garage": {
          "description": "Represents a Favorite Location, including a place and a list of vehicles garaged at that location.",
          "readOnly": true,
          "$ref": "#/definitions/JsonFavoriteLocation_ApiV2"
        }
      }
    },
    "TripGoUser_ApiV2": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string",
          "example": "tgu-d4899cd4-189e-43c8-a11e-499a868d9f17",
          "readOnly": true
        },
        "givenName": {
          "type": "string",
          "example": "John"
        },
        "surname": {
          "type": "string",
          "example": "Doe"
        },
        "address1": {
          "type": "string",
          "example": "618 Foothill Rd"
        },
        "address2": {
          "type": "string",
          "example": "Beverly Hills"
        },
        "city": {
          "type": "string",
          "example": "Los Angeles"
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "postCode": {
          "type": "string",
          "example": "64503"
        },
        "firstWeekday": {
          "type": "integer",
          "format": "int32",
          "example": 0
        },
        "profileWeights": {
          "$ref": "#/definitions/JsonProfileWeights_ApiV2"
        },
        "minimumTransferTime": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "maximumWalkingDuration": {
          "type": "integer",
          "format": "int32",
          "example": 10
        },
        "distanceUnit": {
          "type": "string",
          "enum": [
            "metric",
            "imperial",
            "automatic"
          ]
        },
        "cycleSpeed": {
          "type": "number",
          "format": "double",
          "example": 12.0
        },
        "walkSpeed": {
          "type": "number",
          "format": "double",
          "example": 4.8
        },
        "currency": {
          "type": "string",
          "example": "AUD",
          "description": "preferred currency of the user. Currencies are identified by their ISO4217 currency codes. Visit the <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">wikipedia ISO web site</a> for more information, including a table of currency codes."
        },
        "valueOfTime": {
          "type": "integer",
          "format": "int32"
        },
        "opting": {
          "$ref": "#/definitions/JsonOpting_ApiV2"
        },
        "appData": {
          "type": "object",
          "description": "Represents any app specific data values for a user, must all be sent together when updating it",
          "additionalProperties": {
            "type": "object"
          }
        },
        "formatVersion": {
          "type": "integer",
          "format": "int32",
          "example": 11
        },
        "name": {
          "type": "string",
          "example": "John Doe",
          "readOnly": true
        },
        "largeImageURL": {
          "type": "string",
          "example": "./api/user/image/large/userID",
          "readOnly": true
        },
        "smallImageURL": {
          "type": "string",
          "example": "./api/user/image/small/userID",
          "readOnly": true
        },
        "favorites": {
          "type": "array",
          "description": "Retrieve the list of favorites<br> Cannot be used to update the favorites, for that you need to use the /favorite endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonFavorite_ApiV2"
          }
        },
        "searchHistory": {
          "type": "array",
          "description": "Retrieve the list of history items<br> Cannot be used to update the history search terms, for that you need to use the /history endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonSearchHistory_ApiV2"
          }
        },
        "vehicles": {
          "type": "array",
          "description": "Retrieve the list of vehicles<br> Cannot be used to update the vehicles, for that you need to use the /vehicle endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonVehicle_ApiV2"
          }
        },
        "habituals": {
          "type": "array",
          "description": "Retrieve the list of habituals<br> Cannot be used to update the habituals, for that you need to use the /habituals endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonHabitualItem_ApiV2"
          }
        },
        "email": {
          "type": "string",
          "readOnly": true
        },
        "phones": {
          "type": "array",
          "description": "Retrieve the list of phones<br> Cannot be used to update the phones, for that you need to use the user endpoints.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonPhone_ApiV2"
          }
        },
        "locationKeys": {
          "type": "array",
          "description": "Retrieve the list of location keys<br> Cannot be used to update the location keys, for that you need to use the /locationkey endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonLocationKey_ApiV2"
          }
        },
        "eventInfos": {
          "type": "array",
          "description": "Retrieve the list of event infos<br> Cannot be used to update the events info, for that you need to use the /eventinfo endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonEventInfo_ApiV2"
          }
        },
        "tripItems": {
          "type": "array",
          "description": "Retrieve the list of trip items<br> Cannot be used to update the trip items, for that you need to use the /tripitem endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonAbstractTripItem_ApiV2"
          }
        },
        "emails": {
          "type": "array",
          "description": "Retrieve the list of emails",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonEmail_ApiV2"
          }
        }
      }
    },
    "JsonEmail": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "johndoe@skedgo.com"
        },
        "validated": {
          "type": "boolean",
          "readOnly": true
        },
        "primary": {
          "type": "boolean",
          "readOnly": true
        }
      },
      "description": "Represents a user email, it can be set as primary and may be validated or not"
    },
    "JsonOpting": {
      "type": "object",
      "properties": {
        "googleAnalytics": {
          "type": "boolean"
        },
        "xeroxAnalytics": {
          "type": "boolean"
        }
      },
      "description": "Represents opting's booleans for the user, must all be sent together when updating it"
    },
    "JsonPhone": {
      "type": "object",
      "properties": {
        "phoneCode": {
          "type": "string",
          "example": "750"
        },
        "phone": {
          "type": "string",
          "example": "43216789"
        },
        "validated": {
          "type": "boolean",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "example": "mobile"
        },
        "id": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JsonProfileWeights": {
      "type": "object",
      "properties": {
        "carbon": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "hassle": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "money": {
          "type": "number",
          "format": "float",
          "example": 1.0
        },
        "time": {
          "type": "number",
          "format": "float",
          "example": 1.0
        }
      },
      "description": "Represents the user preferences about how to combine the various components of a trip's quality into a single figure"
    },
    "JsonVehicle": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "example": "096c35b8-8fcb-11e5-8994-feff819cdc9f"
        },
        "name": {
          "type": "string",
          "example": "Primus"
        },
        "type": {
          "type": "string",
          "example": "car"
        },
        "garage": {
          "description": "Represents a Favorite Location, including a place and a list of vehicles garaged at that location.",
          "readOnly": true,
          "$ref": "#/definitions/JsonFavoriteLocation"
        }
      }
    },
    "UpdateTripGoUser": {
      "type": "object",
      "properties": {
        "userID": {
          "type": "string",
          "example": "tgu-d4899cd4-189e-43c8-a11e-499a868d9f17",
          "readOnly": true
        },
        "givenName": {
          "type": "string",
          "example": "John"
        },
        "surname": {
          "type": "string",
          "example": "Doe"
        },
        "address1": {
          "type": "string",
          "example": "618 Foothill Rd"
        },
        "address2": {
          "type": "string",
          "example": "Beverly Hills"
        },
        "city": {
          "type": "string",
          "example": "Los Angeles"
        },
        "country": {
          "type": "string",
          "example": "United States"
        },
        "postCode": {
          "type": "string",
          "example": "64503"
        },
        "firstWeekday": {
          "type": "integer",
          "format": "int32",
          "example": 0
        },
        "profileWeights": {
          "$ref": "#/definitions/JsonProfileWeights"
        },
        "minimumTransferTime": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "maximumWalkingDuration": {
          "type": "integer",
          "format": "int32",
          "example": 10
        },
        "distanceUnit": {
          "type": "string",
          "enum": [
            "metric",
            "imperial",
            "automatic"
          ]
        },
        "cycleSpeed": {
          "type": "number",
          "format": "double",
          "example": 12.0
        },
        "walkSpeed": {
          "type": "number",
          "format": "double",
          "example": 4.8
        },
        "currency": {
          "type": "string",
          "example": "AUD",
          "description": "preferred currency of the user. Currencies are identified by their ISO4217 currency codes. Visit the <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">wikipedia ISO web site</a> for more information, including a table of currency codes."
        },
        "valueOfTime": {
          "type": "integer",
          "format": "int32"
        },
        "opting": {
          "$ref": "#/definitions/JsonOpting"
        },
        "appData": {
          "type": "object",
          "description": "Represents any app specific data values for a user, must all be sent together when updating it",
          "additionalProperties": {
            "type": "object"
          }
        },
        "formatVersion": {
          "type": "integer",
          "format": "int32",
          "example": 11
        },
        "name": {
          "type": "string",
          "example": "John Doe",
          "readOnly": true
        },
        "largeImageURL": {
          "type": "string",
          "example": "./api/user/image/large/userID",
          "readOnly": true
        },
        "smallImageURL": {
          "type": "string",
          "example": "./api/user/image/small/userID",
          "readOnly": true
        },
        "favorites": {
          "type": "array",
          "description": "Retrieve the list of favorites<br> Cannot be used to update the favorites, for that you need to use the /favorite endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonFavorite"
          }
        },
        "searchHistory": {
          "type": "array",
          "description": "Retrieve the list of history items<br> Cannot be used to update the history search terms, for that you need to use the /history endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonSearchHistory"
          }
        },
        "vehicles": {
          "type": "array",
          "description": "Retrieve the list of vehicles<br> Cannot be used to update the vehicles, for that you need to use the /vehicle endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonVehicle"
          }
        },
        "habituals": {
          "type": "array",
          "description": "Retrieve the list of habituals<br> Cannot be used to update the habituals, for that you need to use the /habituals endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonHabitualItem"
          }
        },
        "pendingValidation": {
          "type": "array",
          "description": "Retrieve the list of emails pending validation.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonEmail"
          }
        },
        "aliases": {
          "type": "array",
          "description": "Retrieve the list of email aliases<br> Cannot be used to update the aliases, for that you need to use the account endpoints.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonEmail"
          }
        },
        "phones": {
          "type": "array",
          "description": "Update phone, enable to use for the case when you keep only one Phone number for the user, the list must contain just one phone",
          "items": {
            "$ref": "#/definitions/JsonPhone"
          }
        },
        "emails": {
          "type": "array",
          "description": "Update email, enable to use for the case when you keep only one Email for the user, the list must contain just one email, validation email won't be sent and it will be keeped as primary not validated. To send validation email use POST /email/{email}",
          "items": {
            "$ref": "#/definitions/JsonEmail"
          }
        },
        "email": {
          "type": "string",
          "readOnly": true
        },
        "locationKeys": {
          "type": "array",
          "description": "Retrieve the list of location keys<br> Cannot be used to update the location keys, for that you need to use the /locationkey endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonLocationKey"
          }
        },
        "eventInfos": {
          "type": "array",
          "description": "Retrieve the list of event infos<br> Cannot be used to update the events info, for that you need to use the /eventinfo endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonEventInfo"
          }
        },
        "tripItems": {
          "type": "array",
          "description": "Retrieve the list of trip items<br> Cannot be used to update the trip items, for that you need to use the /tripitem endpoint.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/JsonAbstractTripItem"
          }
        }
      }
    },
    "JsonPushNotificationToken": {
      "type": "object",
      "properties": {
        "platform": {
          "type": "string",
          "example": "ANDROID",
          "description": "android or ios device",
          "enum": [
            "ANDROID",
            "IOS"
          ]
        },
        "deviceId": {
          "type": "string",
          "example": "o4PLaV9zP5yBGneMQGXu",
          "description": "a unique id for that user/device pair"
        },
        "token": {
          "type": "string",
          "example": "rwumwEuwTNp8yZ4TQFxtZa651eLh1izaI3kijwg7sF30bMmJEyS8wKmX7s1Xob5Ev4AjrIuSKkkREZoWBB2HNXSl1Ap5DnDUEvnaYsYk4GVG8FOQqBE6sq3HFPOYBpv7fVrd9z3vyaGxsIAn3hddlpDLxFM4K3jbEZtXkUIGXZFD4Dju4cswJkjR6Qkpk60zwsNszzle"
        }
      }
    },
    "JsonPushNotificationToken_Api": {
      "type": "object",
      "properties": {
        "platform": {
          "type": "string",
          "example": "ANDROID",
          "description": "android or ios device",
          "enum": [
            "ANDROID",
            "IOS"
          ]
        },
        "deviceId": {
          "type": "string",
          "example": "o4PLaV9zP5yBGneMQGXu",
          "description": "a unique id for that user/device pair"
        },
        "token": {
          "type": "string",
          "example": "rwumwEuwTNp8yZ4TQFxtZa651eLh1izaI3kijwg7sF30bMmJEyS8wKmX7s1Xob5Ev4AjrIuSKkkREZoWBB2HNXSl1Ap5DnDUEvnaYsYk4GVG8FOQqBE6sq3HFPOYBpv7fVrd9z3vyaGxsIAn3hddlpDLxFM4K3jbEZtXkUIGXZFD4Dju4cswJkjR6Qkpk60zwsNszzle"
        }
      }
    },
    "JsonResultCollectionJsonPushNotificationToken_Api": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonPushNotificationToken_Api"
          }
        }
      }
    },
    "JsonResult_Api": {
      "type": "object",
      "properties": {
        "result": {
          "type": "object"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "object": {
          "type": "object"
        },
        "dataHandler": {
          "$ref": "#/definitions/DataHandler"
        },
        "contentType": {
          "$ref": "#/definitions/MediaType"
        },
        "contentId": {
          "type": "string"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        }
      }
    },
    "CommandInfo": {
      "type": "object",
      "properties": {
        "commandName": {
          "type": "string"
        },
        "commandClass": {
          "type": "string"
        }
      }
    },
    "ContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "filename": {
          "type": "string"
        }
      }
    },
    "DataFlavor": {
      "type": "object",
      "properties": {
        "mimeType": {
          "type": "string"
        },
        "humanPresentableName": {
          "type": "string"
        },
        "primaryType": {
          "type": "string"
        },
        "subType": {
          "type": "string"
        },
        "mimeTypeSerializedObject": {
          "type": "boolean"
        },
        "defaultRepresentationClassAsString": {
          "type": "string"
        },
        "representationClassInputStream": {
          "type": "boolean"
        },
        "representationClassReader": {
          "type": "boolean"
        },
        "representationClassCharBuffer": {
          "type": "boolean"
        },
        "representationClassByteBuffer": {
          "type": "boolean"
        },
        "representationClassSerializable": {
          "type": "boolean"
        },
        "representationClassRemote": {
          "type": "boolean"
        },
        "flavorSerializedObjectType": {
          "type": "boolean"
        },
        "flavorRemoteObjectType": {
          "type": "boolean"
        },
        "flavorJavaFileListType": {
          "type": "boolean"
        },
        "flavorTextType": {
          "type": "boolean"
        }
      }
    },
    "DataHandler": {
      "type": "object",
      "properties": {
        "dataSource": {
          "$ref": "#/definitions/DataSource"
        },
        "name": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "content": {
          "type": "object"
        },
        "contentType": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        },
        "transferDataFlavors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFlavor"
          }
        },
        "preferredCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        },
        "allCommands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandInfo"
          }
        }
      }
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "inputStream": {
          "$ref": "#/definitions/InputStream"
        },
        "contentType": {
          "type": "string"
        },
        "outputStream": {
          "$ref": "#/definitions/OutputStream"
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardType": {
          "type": "boolean"
        },
        "wildcardSubtype": {
          "type": "boolean"
        }
      }
    },
    "MultipartBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/MediaType"
        },
        "rootAttachment": {
          "$ref": "#/definitions/Attachment"
        },
        "allAttachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        },
        "childAttachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        }
      }
    },
    "OutputStream": {
      "type": "object"
    },
    "JsonResultCollectionJsonVehicle": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JsonVehicle"
          }
        }
      }
    },
    "ApiResult": {
      "type": "object",
      "properties": {
        "changed": {
          "type": "boolean"
        },
        "userToken": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "newUser": {
          "type": "boolean"
        }
      }
    },
    "JsonAlias": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "email@address.com"
        },
        "validated": {
          "type": "boolean"
        },
        "primary": {
          "type": "boolean"
        }
      }
    },
    "JsonAliases": {
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "description": "List of email aliases",
          "items": {
            "$ref": "#/definitions/JsonAlias"
          }
        }
      }
    }
  }
}